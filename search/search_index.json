{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Databases/ACID%20properties/","title":"ACID properties","text":"<ol> <li> <p>Atomicity: either the entire transaction takes place at once or doesn\u2019t happen at all. There is no midway i.e. transactions do not occur partially. Each transaction is considered as one unit and either runs to completion or is not executed at all. Two operations of Atomicity are:     \u2014Abort: If a transaction aborts, changes made to the database are not visible.      \u2014Commit: If a transaction commits, changes made are visible.      Atomicity is also known as the \u2018All or nothing rule\u2019. </p> </li> <li> <p>Consistency : integrity constraints must be maintained so that the *database is consistent before and after the transaction. It refers to the correctness of a database.*</p> </li> <li> <p>Isolation : This property ensures that multiple transactions can occur concurrently without leading to the inconsistency of the database state. Transactions occur independently without interference. Changes occurring in a particular transaction will not be visible to any other transaction until that particular change in that transaction is written to memory or has been committed. This property ensures that the execution of transactions concurrently will result in a state that is equivalent to a state achieved these were executed serially in some order.</p> </li> <li> <p>Durability : This property ensures that once the transaction has completed execution, the updates and modifications to the database are stored in and written to disk and they persist even if a system failure occurs. These updates now become permanent and are stored in non-volatile memory. The effects of the transaction, thus, are never lost. </p> </li> </ol>"},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/","title":"Advantages and disadvantages of databases and DBMS over traditional file systems","text":""},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/#databases","title":"Databases","text":""},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/#advantages","title":"Advantages","text":"<ul> <li>Reduced\u00a0data redundancy.</li> <li>Also, there are reduced errors and increased consistency.</li> <li>**Easier data integrity from application programs.</li> <li>Improved data access to users through the use of host and query languages.</li> <li>Data security is also improved.</li> <li>Reduced data entry, storage, and retrieval costs.</li> </ul>"},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/#dbms","title":"DBMS","text":""},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/#advantages_1","title":"Advantages","text":"<ol> <li>Minimized redundancy and data consistency: <ul> <li>Data is normalized in DBMS to minimize the redundancy which helps in keeping data consistent </li> <li>For Example, student information can be kept at one place in DBMS and accessed by different users</li> </ul> </li> <li>Simplified Data Access: <ul> <li>A user need only name of the relation not exact location to access data, so the process is very simple</li> </ul> </li> <li>Multiple data views: <ul> <li>Different views of same data can be created to cater the needs of different users. </li> <li>For Example, faculty salary information can be hidden from student view of data but shown in admin view </li> </ul> </li> <li>Data Security:<ul> <li>Only authorized users are allowed to access the data in DBMS</li> <li>Data can be encrypted by DBMS which makes it secure</li> </ul> </li> <li>Concurrent access to data: <ul> <li>Data can be accessed concurrently by different users at same time in DBMS</li> </ul> </li> <li>Backup and Recovery mechanism:<ul> <li>DBMS backup and recovery mechanism helps to avoid data loss and data inconsistency in case of catastrophic failures</li> </ul> </li> </ol>"},{"location":"Databases/Advantages%20and%20disadvantages%20of%20databases%20and%20DBMS%20over%20traditional%20file%20systems/#disadvantages","title":"Disadvantages","text":"<ol> <li>Complexity:<ul> <li>Implementing a database solution often involves understanding and applying complex topics like normalization principles, designing relationships, and ensuring data integrity</li> </ul> </li> <li>Cost:<ul> <li>Many commercial database management systems (DBMS) require purchasing expensive licenses</li> <li>Additional costs are also associated with hiring skilled database administrators, (DBAs)developers and periodic software upgrades, support</li> <li>Databases also often require high-performance servers and storage solutions to handle large volumes of data and transactions, which can be costly</li> </ul> </li> <li>Handling Performance Issues:<ul> <li>Databases can be resource-intensive, requiring significant CPU, memory, and storage resources, especially as the volume of data grows</li> <li>Scaling databases to handle increased loads and larger datasets can be complex and expensive, requiring distributed systems or cloud-based solutions</li> <li>Databases require regular maintenance tasks such as backups, indexing, and performance tuning, which can be time-consuming and require specialized knowledge</li> </ul> </li> <li>Data Integrity and Consistency:<ul> <li>Ensuring data integrity and consistency, especially in distributed databases or during concurrent transactions, requires sophisticated mechanisms like ACID properties (Atomicity, Consistency, Isolation, Durability).</li> <li>Managing and recovering from errors or failures (e.g., hardware failures, software bugs) without data loss or corruption can be complex.</li> </ul> </li> <li>Security:<ul> <li>Upgrades and maintenance activities can lead to downtime, affecting business operations and user access to the database.</li> <li>Ensuring data privacy and compliance with regulations like GDPR or HIPAA requires continuous monitoring and updating of security practices.</li> </ul> </li> <li>Vendor Lock-In:<ul> <li>Many databases use proprietary technology, which can lead to vendor lock-in. Migrating data and applications to another system can be difficult and costly.</li> <li>Integration with other systems and technologies can be problematic if the database relies on proprietary formats or protocols.</li> </ul> </li> <li>Data Redundancy and Duplication:<ul> <li>While normalization reduces redundancy, it can also lead to complex queries and performance overheads. </li> <li>Conversely, denormalization to improve performance can reintroduce redundancy and complicate data management.</li> </ul> </li> </ol>"},{"location":"Databases/Applications%20of%20databases/","title":"Applications of databases","text":""},{"location":"Databases/Applications%20of%20databases/#1-web-applications","title":"1. Web applications","text":"<p>Many web applications also use Databases in order to store data. This can be confidential information of an organization or some private information about the user. Database is used to store data in sequential order and helps you in accessing data whenever required.</p> <ul> <li>Also many web applications are created using Database applications. There are web sites that also combine an accounting database system to record sales transactions and a CRM database application to incorporate feedback and drive positive customer experience. We\u2019ll discuss the CRM database in the next topic.</li> <li>The most popular web-based application \u201cFacebook\u201d\u00a0is essentially a database built upon the \u201cMySQL\u201d database system and is an indication of the increasing usage of database applications as foundation for Web-based applications.</li> </ul>"},{"location":"Databases/Applications%20of%20databases/#2-crm-applications","title":"2. CRM applications","text":"<p>A Customer Relationship Management System (CRM) is a perfect database application that has been *customized to manage the marketing, sales, and support relationships between a business and it\u2019s customers.</p> <p>The major goal is to maximize the number of sales, minimize costs and foster strategic customer relationships.</p>"},{"location":"Databases/Architectures%20of%20DBMS/","title":"Architectures of DBMS","text":""},{"location":"Databases/Architectures%20of%20DBMS/#single-tier","title":"Single tier","text":"<p>Here a database is directly accessible to the user. It means the user can directly reside on a DBMS and uses it. Any changes done here will directly be done on the database itself. And, it doesn\u2019t provide a handy tool for end-users. eg. 1-Tier is used where the Client, Server, and\u00a0Database\u00a0all reside on the same machine. Anytime you install a Database in your system and access SQL queries, it is the 1 tier architecture that is used.</p>"},{"location":"Databases/Architectures%20of%20DBMS/#2-tier","title":"2-tier","text":"<p>The two-tier architecture is the same as the basic client-server. In this architecture, applications on the client end can directly communicate with the database at the server-side. In order to communicate with the DBMS, the client-side application establishes a *connection with the server-side.</p> <p>Whenever the client machine makes a request to access the database present in the server using\u00a0SQL, the server performs the request on the database and returns the result back to the client. eg., API's like ODBC, JDBC are used for this interaction.</p>"},{"location":"Databases/Architectures%20of%20DBMS/#3-tier","title":"3-tier","text":"<p>The 3-Tier architecture contains a layer between the client and the server. Here, the client can\u2019t directly communicate with the server. The end-user has no idea about the application server. The database also has no idea about any other user beyond the application.</p> <p>The application present on the client-end interacts with an application server which in turn communicates with the database system.</p> <p>It has three layers or tiers namely, Presentation layer, Application layer, and Database layer.</p> <ul> <li> <p>Database Tier:\u00a0In this tier, a database is present along with its processing languages (Query). You also have the relations that define the data and their constraints at this level.</p> </li> <li> <p>Application Tier:\u00a0It is also called the middle tier. This tier consists of application server and the programs that access the Database. For a user, this application tier showcases an abstract view of the Database. At the other end, the Database tier is not aware of other users beyond the application tier. Therefore, the application layer sits in the middle and acts as a mediator between the end-user and the Database.</p> </li> <li> <p>User Tier:\u00a0This is also called as a Presentation tier. The end-users operate in this tier and know nothing about the existence of the Database beyond this layer. In this layer, multiple\u00a0views\u00a0of the Database can be provided by the application. All views are generated by applications that are present in the Application tier.</p> </li> </ul>"},{"location":"Databases/Architectures%20of%20DBMS/#advantages","title":"Advantages:","text":"<ul> <li>Enhanced scalability due to distributed deployment of application servers. Now,individual connections need not be made between client and server. </li> <li>Data Integrity is maintained. Since there is a middle layer between client and server, data corruption can be avoided/removed.</li> <li>Security is improved. This type of model prevents direct interaction of the client with the server thereby reducing access to unauthorized data. </li> </ul>"},{"location":"Databases/Architectures%20of%20DBMS/#disadvantages","title":"Disadvantages:","text":"<ul> <li>Increased complexity of implementation and communication. It becomes difficult for this sort of interaction to take place due to presence of middle layers.</li> </ul>"},{"location":"Databases/Characteristics%20of%20DBMS/","title":"Characteristics of DBMS","text":"<ul> <li>To limit*\u00a0access\u00a0permissions**\u00a0of users</li> <li>Provide multiple\u00a0views\u00a0of the single database schema</li> <li>Facilitates\u00a0security\u00a0and **removes data redundancy</li> <li>Allows\u00a0multi-user transaction\u00a0processing and sharing of data</li> <li>Follows the\u00a0ACID\u00a0property</li> <li>Offers both physical and logical data independence</li> </ul>"},{"location":"Databases/Characteristics%20of%20databases/","title":"Characteristics of databases","text":"<p>Now, the major characteristics of a Database include:</p> <ol> <li> <p>in providing the database:</p> <ul> <li>It uses a\u00a0**digital repository established on a server to store and manage the information.</li> <li>Most importantly, the database is used to\u00a0**provide security of data.</li> <li>DBMS contains all\u00a0**automatic backup and recovery procedures.</li> <li>It also contains\u00a0**ACID properties that maintain data in a healthy state in case of failure.  - </li> <li>The database should be able to\u00a0**store all kinds of data that exist\u00a0in this real world.</li> </ul> </li> <li> <p>in providing data stored inside the database:</p> <ul> <li>It can provide a\u00a0**clear and logical view of the process that manipulates data.</li> <li>Database\u00a0can **reduce the complex relationship between data.</li> <li>It is also\u00a0used to support the **manipulation and processing of data.</li> <li>You can view database from\u00a0different viewpoints according to the requirements specified by\u00a0the user.</li> </ul> </li> </ol>"},{"location":"Databases/Data%20independence/","title":"Data independence","text":"<p>Data independence means a change of data at one level should not affect another level. Two types of data independence are present in this architecture: </p> <ol> <li> <p>Physical Data Independence: Any change in the physical location of tables and indexes should not affect the conceptual level or external view of data. This data independence is easy to achieve and implemented by most of the DBMS. </p> </li> <li> <p>Conceptual Data Independence: The data at conceptual level schema and external level schema must be independent. This means, change in conceptual schema should not affect external schema. e.g.; Adding or deleting attributes of a table should not affect the user\u2019s view of table. But this type of independence is difficult to achieve as compared to physical data independence because the changes in conceptual schema are reflected in user\u2019s view.</p> </li> </ol>"},{"location":"Databases/Databases/","title":"Databases","text":""},{"location":"Databases/Databases/#what-is-database-db","title":"What is Database (DB)?","text":"<p>A database is an Database is a  - collection of inter-related data which helps in efficient retrieval, insertion and deletion of data from database - organizes the data in the form of tables, views, schemas, reports etc - typically stored electronically in a computer system. - A database is usually controlled by a\u00a0database management system (DBMS). - Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.</p>"},{"location":"Databases/Databases/#dbms","title":"DBMS","text":"<p>A Database Management System (DBMS)\u00a0is comprehensive database software  that is used to manage the Database. It\u00a0receives instruction from a Database Administrator (DBA) and accordingly instructs the system to make the corresponding changes.  A DBMS serves as an interface between the database and its end users or programs, allowing users to retrieve, update, and manage how the information is organized and optimized. A DBMS also facilitates oversight and control of databases, enabling a variety of *administrative operations such as performance monitoring, tuning, and backup and recovery.</p> <p>Some examples of popular database software or DBMSs include  Microsoft SQL Server, MySQL, Microsoft Access.</p>"},{"location":"Databases/Databases/#database-management-systems-allow-users-to-do-the-following","title":"Database Management Systems allow users to do the following:","text":"<ul> <li>Define Data\u00a0\u2013 Allows users to *create, modify and delete the definitions which define the organization of the database.</li> <li>Update Data\u00a0\u2013 Provides **access to the users to insert, modify and delete data from the database.</li> <li>Retrieve Data\u00a0\u2013 Allows users to *retrieve data from a database based on the requirement.</li> <li>Administration of users\u00a0\u2013 Registers users and *monitors their action, enforces data security, maintains data integrity, monitors performance and deals with concurrency control and recovering information corrupted by unexpected failure.</li> </ul>"},{"location":"Databases/Databases/#important-questions","title":"Important questions","text":"<ul> <li>Characteristics of databases</li> <li>ACID properties</li> <li>Relational Databases</li> <li>Characteristics of DBMS</li> <li>Applications of databases</li> <li>Architectures of DBMS </li> <li>Advantages and disadvantages of databases and DBMS over traditional file systems</li> <li>Data independence</li> </ul>"},{"location":"Databases/Relational%20Databases/","title":"Relational Databases","text":""},{"location":"Databases/Relational%20Databases/#definition","title":"Definition","text":"<p>Relational databases are based on the relational model, which organizes data into tables with rows and columns. These databases have been the standard choice for many applications due to their robust consistency, support for complex queries, and adherence to ACID properties (Atomicity, Consistency, Isolation, Durability). </p> <p>Popular relational databases include MySQL, PostgreSQL, Microsoft SQL Server, and Oracle. Each of these options has its unique features, strengths, and weaknesses, making them suitable for different use cases and requirements. When considering a relational database, it is essential to evaluate the specific needs of the application in terms of data consistency, support for complex queries, and scalability, among other factors.</p> <p>![[Pasted image 20240520012226.png]] Source</p>"},{"location":"Databases/Relational%20Databases/#key-features-and-benefits","title":"Key features and benefits:","text":"<ul> <li>Data in relational databases is stored in tables with a predefined schema, enforcing a consistent structure throughout the database which makes it easier to manage and maintain data, especially when dealing with large amounts of structured data.</li> <li>The relationships between tables in a relational database are defined by primary and foreign keys, ensuring referential integrity. This feature allows for efficient querying of related data and supports complex data relationships.</li> <li>Relational databases use Structured Query Language (SQL) for querying, manipulating, and managing data. SQL is a powerful and widely adopted language that enables developers to perform complex queries and data manipulations.</li> <li>Relational databases support transactions, which are sets of related operations that either succeed or fail as a whole. This feature ensures the ACID properties are maintained, guaranteeing data consistency and integrity.</li> <li>Relational databases offer various indexing techniques and query optimization strategies, which help improve query performance and reduce resource consumption.</li> </ul>"},{"location":"Databases/Relational%20Databases/#drawbacks","title":"Drawbacks:","text":"<ul> <li>Scaling relational databases horizontally (adding more nodes) can be challenging, especially when compared to some NoSQL databases that are designed for distributed environments.</li> <li>The predefined schema in relational databases can make it difficult to adapt to changing requirements, as altering the schema may require significant modifications to existing data and applications.</li> <li>As the volume of data grows, relational databases may experience performance issues, particularly when dealing with complex queries and large-scale data manipulations.</li> <li>Relational databases are designed for structured data, which may not be suitable for managing unstructured or semi-structured data, such as social media data or sensor data.</li> </ul>"},{"location":"blog/","title":"Blog","text":""}]}